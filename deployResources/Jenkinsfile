pipeline {
     agent {
            docker {
                image 'maven:3-alpine'
                args '-v /home/mystox/respository:/root/.m2'
            }
        }
    parameters {
        string(name: 'host', defaultValue: '172.16.5.60', description: '')
        string(name: 'user', defaultValue: 'root', description: '')
        string(name: 'password', defaultValue: 'yytd1234', description: '')
        //string(name: 'deployServer', defaultValue: 'all', description: '')
        choice(name: 'deployServer', choices: \
        ['skipModule', 'all','SCLOUD_SERVER_WEB','ALARM_SERVER_WEB', 'REPORTS_SERVER','LOG_SERVER','ASSET_SERVER',\
        'ALARM_CONTROLLER','ALARM_SENDER','ALARM_CYCLE','ALARM_LEVEL','ALARM_DELIVER',\
        'SCLOUD_SERVER_TASK','SCLOUD_SERVER_HISTORY','GATEWAY_TOWER_SERVER','GATEWAY_TOWER_HEART' \
        ],\
         description: 'serverChoices')
    }
    environment {
        def remote =''
    }
    stages {
        //编译
        stage ('Build') {
            steps {
                sh 'mvn -DskipTests clean package --settings /root/.m2/settings.xml'
                sh 'mvn -DskipTests -pl /yyds-iarpc-starter -am install --settings /root/.m2/settings.xml'
            }
        }
         stage ('init-ssh') {
            steps {
                script {
                    remote = [:]
                    remote.name = 'remote-server'
                    remote.user = "${params.user}"
                    remote.password = "${params.password}"
                    remote.host = "${params.host}"
                    remote.allowAnyHosts = true
                }
            }
        }
         //报表-页面服务
        stage ('REPORTS_SERVER') {
            when {
                expression {
                    def serverCode = 'REPORTS_SERVER'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                        remoteExecutor('yyds-server-project/reports-server/target/reports-server-1.0.0.jar', \
                        '/home/yyds/reports','reports-server-1.0.0.jar',10,'deployResources/reports-server.ini','reports-server')
                        sshCommand remote: remote, command: 'mkdir -p ' + '/home/yyds/reports/testResources'
                        sshPut remote: remote, from: 'testResources/testReport.json', into: '/home/yyds/reports/testResources/testReport.json'
                }
            }
        }
        //日志页面服务
        stage ('LOG_SERVER') {
            when {
                expression {
                    def serverCode = 'LOG_SERVER'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                        remoteExecutor('yyds-server-project/log-server/target/log-server-1.0.0.jar', \
                        '/home/yyds/log','log-server-1.0.0.jar',10,'deployResources/log-server.ini','log-server')
                }
            }
        }
    }
}


//远程部署方法
def remoteExecutor(sourcePath, path, jarName, time, initFile, initName){
    sshCommand remote: remote, command: 'mkdir -p ' + path
    sshCommand remote: remote, command: 'supervisorctl stop '+ initName
    sshPut remote: remote, from: sourcePath, into: path + '/' + jarName
    sshPut remote: remote, from: initFile, into: '/etc/supervisord.d'
    sshCommand remote: remote, command: 'for i in {1..'+ time +'}; do echo -n \"Loop \$i \"; date ; sleep 1; done'
    sshCommand remote: remote, command: 'supervisorctl update'
    sshCommand remote: remote, command: 'supervisorctl restart '+ initName
}