pipeline {
     agent {
            docker {
                image 'maven:3-alpine'
                args '-v /home/mystox/respository:/root/.m2'
            }
        }
    parameters {
        string(name: 'host', defaultValue: '172.16.5.60', description: '')
        string(name: 'user', defaultValue: 'root', description: '')
        string(name: 'password', defaultValue: 'yytd1234', description: '')
        //string(name: 'deployServer', defaultValue: 'all', description: '')
        choice(name: 'deployServer', choices: \
        ['skipModule', 'all','SCLOUD_SERVER_WEB','ALARM_SERVER_WEB', 'REPORTS_SERVER','LOG_SERVER','ASSET_SERVER',\
        'ALARM_CONTROLLER','ALARM_SENDER','ALARM_CYCLE','ALARM_LEVEL','ALARM_DELIVER',\
        'SCLOUD_SERVER_TASK','SCLOUD_SERVER_HISTORY','GATEWAY_TOWER_SERVER','GATEWAY_TOWER_SERVER' \
        ],\
         description: 'serverChoices')
    }
    environment {
        def remote =''
    }
    stages {
        //编译
        stage ('Build') {
            steps {
                sh 'mvn -DskipTests clean package --settings /root/.m2/settings.xml'
                sh 'mvn -DskipTests -pl /yyds-mqtt/yyds-mqtt-starter -am install --settings /root/.m2/settings.xml'
            }
        }
         stage ('init-ssh') {
            steps {
                script {
                    remote = [:]
                    remote.name = 'remote-server'
                    remote.user = "${params.user}"
                    remote.password = "${params.password}"
                    remote.host = "${params.host}"
                    remote.allowAnyHosts = true
                }
            }
        }
        //告警-页面服务
        stage ('ALARM_SERVER_WEB') {
            when {
                expression {
                    def serverCode = 'ALARM_SERVER_WEB'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                        remoteExecutor('yyds-server-project/alarm-server/alarm-server-web/target/alarm-server-web-1.0.0.jar', \
                        '/home/yyds/alarm','alarm-server-web-1.0.0.jar',10,'deployResources/alarm-web.ini','alarm-web')
                }
            }
        }
         //报表-页面服务
        stage ('REPORTS_SERVER') {
            when {
                expression {
                    def serverCode = 'REPORTS_SERVER'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                        remoteExecutor('yyds-server-project/reports-server/target/reports-server-1.0.0.jar', \
                        '/home/yyds/reports','reports-server-1.0.0.jar',10,'deployResources/reports-server.ini','reports-server')
                        sshCommand remote: remote, command: 'mkdir -p ' + '/home/yyds/reports/testResources'
                        sshPut remote: remote, from: 'testResources/testReport.json', into: '/home/yyds/reports/testResources/testReport.json'
                }
            }
        }
        //日志页面服务
        stage ('LOG_SERVER') {
            when {
                expression {
                    def serverCode = 'LOG_SERVER'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                        remoteExecutor('yyds-server-project/log-server/target/log-server-1.0.0.jar', \
                        '/home/yyds/log','log-server-1.0.0.jar',10,'deployResources/log-server.ini','log-server')
                }
            }
        }
        //资管页面服务
        stage ('ASSET_SERVER') {
            when {
                expression {
                    def serverCode = 'ASSET_SERVER'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                       remoteExecutor('yyds-server-project/asset-management-server/target/asset-management-server-1.0.0.jar', \
                       '/home/yyds/asset','asset-management-server-1.0.0.jar',10,'deployResources/asset-server.ini','asset-server')
                       sshCommand remote: remote, command: 'mkdir -p ' + '/home/yyds/asset/AppResources'
                       sshPut remote: remote, from: 'yyds-server-project/asset-management-server/target/classes/AppResources/ciTypeIcon/default.png', into: '/home/yyds/asset/AppResources/ciTypeIcon/default.png'
                }
            }
        }
        //业务云平台页面
        stage ('SCLOUD_SERVER_WEB') {
            when {
                expression {
                    def serverCode = 'SCLOUD_SERVER_WEB'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                        remoteExecutor('yyds-server-project/business-project/scloud-server/scloud-server-web/target/scloud-server-web-1.0.0.jar', \
                        '/home/yyds/scloud/web','scloud-server-web-1.0.0.jar',10,'deployResources/scloud-server-web.ini','scloud-server-web')

                }
            }
        }
        //业务云平子模块
        stage ('SCLOUD_SERVER_TASK') {
            when {
                expression {
                    def serverCode = 'SCLOUD_SERVER_TASK'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                    remoteExecutor('yyds-server-project/business-project/scloud-server/scloud-server-task/target/scloud-server-task-1.0.0.jar', \
                    '/home/yyds/scloud/task','scloud-server-task-1.0.0.jar',10,'deployResources/scloud-server-task.ini','scloud-server-task')

                }
            }
        }
        //业务云平子模块
        stage ('SCLOUD_SERVER_HISTORY') {
            when {
                expression {
                    def serverCode = 'SCLOUD_SERVER_HISTORY'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                    remoteExecutor('yyds-server-project/business-project/scloud-server/scloud-server-history/target/scloud-server-history-1.0.0.jar', \
                    '/home/yyds/scloud/history','scloud-server-history-1.0.0.jar',10,'deployResources/scloud-server-history.ini','scloud-server-history')
                }
            }
        }
       //告警子模块
        stage ('ALARM_CONTROLLER') {
           when {
               expression {
                   def serverCode = 'ALARM_CONTROLLER'
                   def deployServer = params.deployServer
                   return (deployServer == 'all' || deployServer == serverCode \
                   || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
               }
           }
           steps {
               script {
                       remoteExecutor('yyds-server-project/alarm-server/alarm-server-controller/target/alarm-server-controller-1.0.0.jar', \
                       '/home/yyds/alarm/alarm-server-node-jar/controller','alarm-server-controller-1.0.0.jar',10,'deployResources/alarm-controller.ini','alarm-controller')
               }
           }
        }
        stage ('ALARM_SENDER') {
            when {
                expression {
                    def serverCode = 'ALARM_SENDER'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                        remoteExecutor('yyds-server-project/alarm-server/alarm-server-sender/target/alarm-server-sender-1.0.0.jar', \
                        '/home/yyds/alarm/alarm-server-node-jar/sender','alarm-server-sender-1.0.0.jar',10,'deployResources/alarm-sender.ini','alarm-sender')
                }
            }
        }
        stage ('ALARM_CYCLE') {
            when {
                expression {
                    def serverCode = 'ALARM_CYCLE'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                        remoteExecutor('yyds-server-project/alarm-server/alarm-server-cycle/target/alarm-server-cycle-1.0.0.jar', \
                        '/home/yyds/alarm/alarm-server-node-jar/cycle','alarm-server-cycle-1.0.0.jar',10,'deployResources/alarm-cycle.ini','alarm-cycle')
                }
            }
        }
        stage ('ALARM_LEVEL') {
            when {
                expression {
                    def serverCode = 'ALARM_LEVEL'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                        remoteExecutor('yyds-server-project/alarm-server/alarm-server-level/target/alarm-server-level-1.0.0.jar', \
                        '/home/yyds/alarm/alarm-server-node-jar/level','alarm-server-level-1.0.0.jar',10,'deployResources/alarm-level.ini','alarm-level')
                }
            }
        }
        stage ('ALARM_DELIVER') {
            when {
                expression {
                    def serverCode = 'ALARM_DELIVER'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                    remoteExecutor('yyds-server-project/alarm-server/alarm-server-deliver/target/alarm-server-deliver-1.0.0.jar', \
                    '/home/yyds/alarm/alarm-server-node-jar/deliver','alarm-server-deliver-1.0.0.jar',10,'deployResources/alarm-deliver.ini','alarm-deliver')
                }
            }
        }
        //业务网关
        stage ('GATEWAY_TOWER_SERVER') {
            when {
                expression {
                    def serverCode = 'GATEWAY_TOWER_SERVER'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                    remoteExecutor('yyds-server-project/gateway-project/gateway-tower/gateway-tower-server/target/gateway-tower-server-1.0.0.jar', \
                    '/home/yyds/gateway/server','gateway-tower-server-1.0.0.jar',10,'deployResources/gateway-tower-server.ini','gateway-tower-server')
                }
            }
        }
        //网关心跳
        stage ('GATEWAY_TOWER_HEART') {
            when {
                expression {
                    def serverCode = 'GATEWAY_TOWER_HEART'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                    remoteExecutor('yyds-server-project/gateway-project/gateway-tower/gateway-tower-heart/target/gateway-tower-heart-1.0.0.jar', \
                    '/home/yyds/gateway/heart','gateway-tower-heart-1.0.0.jar',10,'deployResources/gateway-tower-heart.ini','gateway-tower-heart')
                }
            }
        }
        /* 此版本common网关已经作废
        stage ('GATEWAY_COMMON_SERVER') {
            when {
                expression {
                    def serverCode = 'GATEWAY_COMMON_SERVER'
                    def deployServer = params.deployServer
                    return (deployServer == 'all' || deployServer == serverCode \
                    || deployServer =~ serverCode+',' || deployServer =~ ','+serverCode)
                }
            }
            steps {
                script {
                        remoteExecutor('yyds-server-project/gateway-project/gateway-common-base/target/gateway-common-base-1.0.0.jar', \
                        '/home/yyds/gateway','gateway-common-base-1.0.0.jar',10,'deployResources/gateway-common-base.ini','gateway-common-base')

                }
            }
        }
        */

    }

}


//远程部署方法
def remoteExecutor(sourcePath, path, jarName, time, initFile, initName){
    sshCommand remote: remote, command: 'mkdir -p ' + path
    sshCommand remote: remote, command: 'supervisorctl stop '+ initName
    sshPut remote: remote, from: sourcePath, into: path + '/' + jarName
    sshPut remote: remote, from: initFile, into: '/etc/supervisord.d'
    sshCommand remote: remote, command: 'for i in {1..'+ time +'}; do echo -n \"Loop \$i \"; date ; sleep 1; done'
    sshCommand remote: remote, command: 'supervisorctl update'
    sshCommand remote: remote, command: 'supervisorctl restart '+ initName
}